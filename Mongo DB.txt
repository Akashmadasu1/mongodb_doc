Mongo DB(Database Management System) ->software(compass)
---------------
mongodb vs mysql(table format)

Database      -  Database 
collections   -   tables
documents   -   rows
fields            -   columns
index           -  index
linking  & embedding        -  joining


datatypes
------------
strings
boolean
integer
double
arrays
objectid
data


Database Commands
-------------------------
1.view all databases -> show dbs
2.create a new or switch datadbase -> use dbName
3.view current database -> db
4.delete database -> db.Database()
5.view collections -> show collections
6.create a  new collection  -> db.createCollection('name')
7.drop a collection -> db.collecitonName.drop()
8.create a new data/document -> db.collectionName.insertOne({})
9.create multiple docs/data  at once -> db.collectionName.insert([{},{},{}])
10.to view all data in a collection -> db.collectionName.find()
11.to view data based on filter/condition -> db.collectionName.find({prop:value})
12.to update data -> db.collectionName.updateOne({name:'Milk'},{$set: {name:'cake'}})
13.to update many data -> db.collectionName.updateMany({name:'Milk'},{$set: {name:'cake'}})
14.detele a data/record -> db.collectionName.deleteOne({PROP:VALUE})
15.detele ALL data/record in collection  -> db.collectionName.deleteMany({})

IDEA 
---------
MongoDB database -> can contain one or more collections
Collections -> can contain different types of documnet(objects)
Documnet - > key value pair list or array or nested document

Crud operations in MongoDB
----------------------------------------
create, read, update, delete

Row(Document )Commands

1.insert one row

db.developer.insert({
	'name': 'akash',
	'lang': 'java',
	'member_since':5
})

2. insert many rows

db.developer.insertMany([{
	'name': 'akash',
	'lang': 'java',
	'member_since':5
	},
	{'name': 'sai',
	'lang': 'python',
	'member_since':5
	}])

3. Search in a mongodb database

	db.developer.find({lang:'python'})

4.limit the nummber of rows in output

	db.developer.find().limit(2)

5.count the nummber of rows in the  output

	db.developer.find().count()

6.update a row

	db.developer.update({name:'akash'},
	{
	'name': 'akhil',
	'lang': 'java',
	'member_since':5
},{upsert: true})
	
7. Mongodb increment operator

	db.developer.update({name: 'akhil'},
	{$inc:{ member_since: 2}})
 

8.mongodb rename operator

	db.developer.upadate({name: 'akash'},
	{$rename:{ member_since: 'member'}})

9.delete row

	db.developer.remove({name:'akash'})

10.show all rows in a collection
	
	db.developer.find()

11.show all rows in a collecion (prettifield)

	db.developer.find().pretty()

12. find the first row matching the object

	db.developer.findOne({name: 'akash'})

Thoradh codes
-----------------

 to see the databases present in my system
--- show dbs


to create a new db / switch to different db
--- use database-name

to create a new collection 
--- db.createCollection('name')

to view the collection in a database
---show collections

to create a new document/record/data
--- db.colletionName.insertOne({})

to create multiple docs/records at once
---db.collectionName.insertMany([{},{},{}])

to view all data in a collection
---db.collectionName.find()

to view data based on filter/condition
---db.collectionName.find({prop:value})

to update a document/record
---db.collectionName.updateOne({name:'ANT Mouse'},{$set:{category:'Electronics'}})

---db.collectionName.updateMany({category:'Electronics'},{$set:{price:10000}})


to delete a record/doc
---db.collectionname.deleteOne({property:value})
---deleteMany

to completely clear your collection
---db.collectionname.deleteMany({})


Reading Datausing different query operators

RELATIONAL or comparison ops

$eq = equals

--db.coll.find({brand:{$eq:'Apple'}})

$gt = greater than

--db.coll.find({price:{$gt:1000},brand:'Apple'})

$gte - greater than or equal to
----db.coll.find({price:{$gte:1000}})

$lt - less than
--- db.coll.find({rating:{$lt:4}})

$lte - less than or equal to

--- db.coll.find({rating:{$lte:4}})

$in - used to specify multiple values for a single field

---db.products.find({brand:{$in:['Apple','LED Lights','Golden']}})

$nin

---db.products.find({brand:{$nin:['Apple','LED Lights','Golden']}})






LOGICAL operators

$and - where all condition should be true
---db.products.find({$and:[{price:{$gte:500}},{price:{$lte:1000}}]})

--db.products.find({price:{$gte:500,$lte:1000}})

$or - even if one is true the whole condition will be considered true

---db.products.find({$or:[{price:{$lte:50}},{brand:'Apple'}]})


PROJECTION - selecting specific properties to view

---db.products.find({},{title:1,description:1})

forcing for not including id
--- db.products.find({},{_id:false,title:true,description:true})



LIMIT

---db.products.find().limit(10)

LIMIT AND SKIP
---db.products.find().limit(n).skip(n)



SORT

---db.products.find().sort({price:-1})



üîç Validation: Ensuring Data Quality
Learn how to implement validation rules to maintain data integrity in your MongoDB databases. We'll cover the basics, show you how to define validation rules, and share best practices for data quality assurance.

üß≠ MongoDB Compass: Your Graphical Interface
MongoDB Compass is your gateway to a visual exploration of MongoDB data. We'll take you on a tour of its features, demonstrate how to connect to your MongoDB instance, and walk you through the essential tools for data analysis and management.


// Validation 


db.createCollection("students",{
    validator:{
        $jsonSchema:{
            bsonType:"object",
            required:["name","jod","age"],
            properties:{
                name:{
                    bsonType:"string",
                    description:"Name should be a string",
                    maxLength:30
                },
                age:{
                    bsonType:"int",
                    description:"Age Should be a number",
                    minimum:12,
                    maximum:50
                },
                jod:{
                    bsonType:"date",
                    description:"jod should be date"
                },
                course:{
                    bsonType:"array",
                    items:{
                        bsonType:"string"
                    },
                    description:"Course should be a string"
                }
            }
        }
    
    }
    
})


db.students.insertOne({name:"Aqib",jod:new Date("2018-8-24"),age:23,course:["Java","Cpp"]})




// aggregation 

// find document based on category 
// group it
//sort it
//limit it

// grouping 

find({}).sort({}).limit(2)

db.products.aggregate([
    {
        $match:{$and:[{},{},{}]}
    },
    {
        $group:{_id:"$category",avgPrice:{$avg:'$price'}}
    },
    {
        $sort:{'avgPrice':-1}
    },
    {
        $limit:2
    }
])


// result 
















 


